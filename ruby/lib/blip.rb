# Piece of data generated by client during his journey
class Blip < Hash

  # Input: Array of numerables
  # Output: encoded ASCII string
  def self.encode(data)
    raise ArgumentError unless data.respond_to? :each
    out = ""
    data.each{|b| (-64..63).include?(b) ? out << (b.round + 64).chr : (raise ArgumentError) }
    out
  end

  def initialize(arg)
    if arg.respond_to? :each_pair
      arg.each_pair do |key, val|
        self[key] = val
      end
      raise ArgumentError unless data.respond_to? :each_byte
    elsif arg.respond_to? :each_byte
      self[:data] = arg
    else
      raise ArgumentError
    end    
  end

  def data
    self[:data] || self['data']
  end

  # Output: Array of numerables encoded in self.data
  def decode
    data.each_byte.to_a.map{|b| (0..127).include?(b) ? b-64 : (raise ArgumentError) }
  end

end
